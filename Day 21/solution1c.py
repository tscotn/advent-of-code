from pathlib import Path
import heapq
from collections import deque
import re
import sys
import functools
test = True
# test = False
p = Path(__file__).with_name('test.txt' if test else 'input.txt')

codes = []
with p.open('r') as f:
    codes = [line.strip() for line in f.readlines()]
    
map = {
    ('A', 'A'): ['A'],
    ('A', '0'): ['<A'],
    ('A', '1'): ['^<<A'],
    ('A', '2'): ['<^A', '^<A'],
    ('A', '3'): ['^A'],
    ('A', '4'): ['<^<^A', '<^^<A', '^^<<A', '^<^<A', '^<<^A'],
    ('A', '5'): ['<^^A', '^<^A', '^^<A'],
    ('A', '6'): ['^^A'],
    ('A', '7'): ['<^<^^A', '<^^<^A', '<^^^<A', '^<^<^A', '^<<^^A', '^<^^<A', '^^<^<A', '^^^<<A'],
    ('A', '8'): ['<^^^A', '^<^^A', '^^<^A', '^^^<A'],
    ('A', '9'): ['^^^A'],
    
    ('0', 'A'): ['>A'],
    ('0', '0'): ['A'],
    ('0', '1'): ['^<A'],
    ('0', '2'): ['^A'],
    ('0', '3'): ['^>A', '>^A'],
    ('0', '4'): ['^<^A', '^^<A'],
    ('0', '5'): ['^^A'],
    ('0', '6'): ['^^>A', '^>^A', '>^^A'],
    ('0', '7'): ['^^^<A', '^<^^A', '^^<^A'],
    ('0', '8'): ['^^^A'],
    ('0', '9'): ['^^^>A', '^^>^A', '^>^^A', '>^^^A'],
        
    ('1', 'A'): ['>>vA', '>v>A'],
    ('1', '0'): ['>vA'],
    ('1', '1'): ['A'],
    ('1', '2'): ['>A'],
    ('1', '3'): ['>>A'],
    ('1', '4'): ['^A'],
    ('1', '5'): ['^>A', '>^A'],
    ('1', '6'): ['^>>A', '>^>A', '>>^A'],
    ('1', '7'): ['^^A'],
    ('1', '8'): ['^^>A', '^>^A', '>^^A'],
    ('1', '9'): ['^^>>A', '^>^>A', '^>>^A', '<^<^A', '>^^>A', '>>^^A'],

    ('2', 'A'): ['v>A', '>vA'],
    ('2', '0'): ['vA'],
    ('2', '1'): ['<A'],
    ('2', '2'): ['A'],
    ('2', '3'): ['>A'],
    ('2', '4'): ['^<A', '<^A'],
    ('2', '5'): ['^A'],
    ('2', '6'): ['^>A', '>^A'],
    ('2', '7'): ['<^^A', '^<^A', '^^<A'],
    ('2', '8'): ['^^A'],
    ('2', '9'): ['^^>A', '^>^A', '>^^A'],
    
    ('3', '0'): ['<vA', 'v<A'],
    ('3', '1'): ['<<A'],
    ('3', '2'): ['<A'],
    ('3', '3'): ['A'],
    ('3', '4'): ['^<<A', '<^<A', '<<^A'],
    ('3', '5'): ['<^A', '^<A'],
    ('3', '6'): ['^A'],
    ('3', '7'): ['<<^^A', '<^<^A', '^<^<A', '<^^<A', '^<<^A', '^^<<A'],
    ('3', '8'): ['<^^A', '^<^A', '^^<A'],
    ('3', '9'): ['^^A'],
    
    ('4', 'A'): ['>>vvA', '>v>vA', '>vv>A', 'v>>vA', 'v>v>A'],
    ('4', '0'): ['v>vA', '>vvA'],
    ('4', '1'): ['vA'],
    ('4', '2'): ['v>A', '>vA'],
    ('4', '3'): ['v>>A', '>v>A', '>>vA'],
    ('4', '4'): ['A'],
    ('4', '5'): ['>A'],
    ('4', '6'): ['>>A'],
    ('4', '7'): ['^A'],
    ('4', '8'): ['^>A', '>^A'],
    ('4', '9'): ['^>>A', '>^>A', '>>^A'],
    
    ('5', '0'): ['vvA'],
    ('5', '1'): ['<vA', '<vA'],
    ('5', '2'): ['vA'],
    ('5', '3'): ['v>A', '>vA'],
    ('5', '4'): ['<A'],
    ('5', '5'): ['A'],
    ('5', '6'): ['>A'],
    ('5', '7'): ['<^A', '^<A'],
    ('5', '8'): ['^A'],
    ('5', '9'): ['^>A', '>^A'],
    
    ('6', 'A'): ['vvA'],
    ('6', '0'): ['<vvA', 'v<vA', 'vv<A'],
    ('6', '1'): ['<<vA', '<v<A', 'v<<A'],
    ('6', '2'): ['<vA', 'v<A'],
    ('6', '3'): ['vA'],
    ('6', '4'): ['<<A'],
    ('6', '5'): ['<A'],
    ('6', '6'): ['A'],
    ('6', '7'): ['<<^A', '<^<A', '^<<A'],
    ('6', '8'): ['<^A', '^<A'],
    ('6', '9'): ['^A'],
    
    ('7', 'A'): ['vv>v>A', 'vv>>vA', 'v>v>vvA', 'v>>vvA', '>>vvvA', 'v>vv>A', '>vvv>A', 'v>v>vA'],
    ('7', '0'): ['vv>vA', 'v>vvA', '>vvvA'],
    ('7', '1'): ['vvA'],
    ('7', '2'): ['vv>A'],
    ('7', '3'): ['vv>>A', 'v>v>A', '>v>vA', '>>vvA'],
    ('7', '4'): ['vA'],
    ('7', '5'): ['v>A', '>vA'],
    ('7', '6'): ['>>vA', 'v>>A', '>v>A'],
    ('7', '7'): ['A'],
    ('7', '8'): ['>A'],
    ('7', '9'): ['>>A'],
    
    ('8', 'A'): ['>vvvA', 'v>vvA', 'vv>vA', 'vvv>A'],
    ('8', '0'): ['vvvA'],
    ('8', '1'): ['<vvA', 'v<vA', 'vv<A'],
    ('8', '2'): ['vvA'],
    ('8', '3'): ['vv>A', 'v>vA', '>vvA'],
    ('8', '4'): ['<vA', 'v<A'],
    ('8', '5'): ['vA'],
    ('8', '6'): ['>vA', 'v>A'],
    ('8', '7'): ['<A'],
    ('8', '8'): ['A'],
    ('8', '9'): ['>A'],

    ('9', 'A'): ['vvvA'],
    ('9', '0'): ['vvv<A', 'vv<vA', 'v<vvA', '<vvvA'],
    ('9', '1'): ['<<vvA', '<v<vA', 'v<v<A', '<vv<A', 'v<<vA', 'vv<<A'],
    ('9', '2'): ['<vvA', 'v<vA', 'vv<A'],
    ('9', '3'): ['vvA'],
    ('9', '4'): ['<<vA', '<v<A', 'v<<A'],
    ('9', '5'): ['<vA', 'v<A'],
    ('9', '6'): ['vA'],
    ('9', '7'): ['<<A'],
    ('9', '8'): ['<A'],
    ('9', '9'): ['A'],



    ('A', '<'): ['v<<A'],
    ('A', 'v'): ['<vA', 'v<A'],
    ('A', '>'): ['vA'],
    ('A', '^'): ['<A'],
    ('A', 'A'): ['A'],
    
    ('^', '^'): ['A'],
    ('^', 'A'): ['>A'],
    ('^', '<'): ['v<A'],
    ('^', 'v'): ['vA'],
    ('^', '>'): ['v>A', '>vA'],
    
    ('<', '^'): ['>^A'],
    ('<', 'A'): ['>>^A'],
    ('<', '<'): ['A'],
    ('<', 'v'): ['>A'],
    ('<', '>'): ['>>A'],
    
    ('v', '^'): ['^A'],
    ('v', '<'): ['<A'],
    ('v', '>'): ['>A'],
    ('v', 'v'): ['A'],
    ('v', 'A'): ['^>A', '>^A'],
    
    ('>', '>'): ['A'],
    ('>', '^'): ['<^A', '^<A'],
    ('>', '<'): ['<<A'],
    ('>', 'v'): ['<A'],
    ('>', 'A'): ['^A']
}
#v<<A>>^A<A>AvA<^AA>A<vAAA>^A
#<v<A>>^A<A>AvA<^AA>A<vAAA>^A

#<vA<AA>>^AvAA<^A>A<v<A>>^AvA^A<vA>^A<v<A>^A>AAvA^A<v<A>A>^AAAvA<^A>A
#<v<A>A<A>>^AvAA<^A>A<v<A>>^AvA^A<vA>^A<v<A>^A>AAvA^A<v<A>A>^AAAvA<^A>A

def translate(code):
    return ''.join([map[c][0] for c in zip('A'+code, code)])

@functools.lru_cache()
def count(step, robot, m):
    if robot == m:
        return 1
    next = map[step][0]
    return sum([count(n, robot+1, m) for n in zip('A' + next, next)])

codes = [('<^^^Av>A^AvvvA', 869), ('^<<A^^A>vvvA>A', 170), ('^A<<A^^>>AvvvA', 319), ('^A<<^A^>>AvvvA', 349), ('^^<<A^>A>AvvvA', 489)]

total = 0
for code, numeric in codes:
    s = sum([count(c, 0, 2) for c in zip('A'+code, code)])
    # print(s, numeric)
    total += (s * numeric)
    
print(total)

    
total = 0
for code, numeric in codes:
    s = sum([count(c, 0, 25) for c in zip('A'+code, code)])
    # print(s, numeric)
    total += (s * numeric)
    
print(total)
#between 
# 73282377926164
# 87455610494428
#
# 77021685919892 NOPE
# 77281762629560 !!!
# 77451424123188 NOPE
# 90889697797068
# try...106262039544732
# 113257292407994
# try...114407688558716
#
# 191601112915046 !!!
#
# 218917999117732

# def get_length(code):
    
#     i1 = [map[a] for a in zip('A'+code, code)]
#     print(i1)
#     i2 = [map[a] for a in zip('A'+i, i) for i in i1]

#     key_to_dir = {
#     ('A', 'A'): ['A'],
#     ('A', '0'): ['<A'],
#     ('A', '1'): ['<^<A', '^<<A'],
#     ('A', '2'): ['<^A', '^<A'],
#     ('A', '3'): ['^A'],
#     ('A', '4'): ['<^<^A', '<^^<A', '^^<<A', '^<^<A', '^<<^A'],
#     ('A', '5'): ['<^^A', '^<^A', '^^<A'],
#     ('A', '6'): ['^^A'],
#     ('A', '7'): ['<^<^^A', '<^^<^A', '<^^^<A', '^<^<^A', '^<<^^A', '^<^^<A', '^^<^<A', '^^^<<A'],
#     ('A', '8'): ['<^^^A', '^<^^A', '^^<^A', '^^^<A'],
#     ('A', '9'): ['^^^A'],
    
#     ('0', 'A'): ['>A'],
#     ('0', '0'): ['A'],
#     ('0', '1'): ['^<A'],
#     ('0', '2'): ['^A'],
#     ('0', '3'): ['^>A', '>^A'],
#     ('0', '4'): ['^<^A', '^^<A'],
#     ('0', '5'): ['^^A'],
#     ('0', '6'): ['^^>A', '^>^A', '>^^A'],
#     ('0', '7'): ['^^^<A', '^<^^A', '^^<^A'],
#     ('0', '8'): ['^^^A'],
#     ('0', '9'): ['^^^>A', '^^>^A', '^>^^A', '>^^^A'],
        
#     ('1', 'A'): ['>>vA', '>v>A'],
#     ('1', '0'): ['>vA'],
#     ('1', '1'): ['A'],
#     ('1', '2'): ['>A'],
#     ('1', '3'): ['>>A'],
#     ('1', '4'): ['^A'],
#     ('1', '5'): ['^>A', '>^A'],
#     ('1', '6'): ['^>>A', '>^>A', '>>^A'],
#     ('1', '7'): ['^^A'],
#     ('1', '8'): ['^^>A', '^>^A', '>^^A'],
#     ('1', '9'): ['^^>>A', '^>^>A', '^>>^A', '<^<^A', '>^^>A', '>>^^A'],

#     ('2', 'A'): ['v>A', '>vA'],
#     ('2', '0'): ['vA'],
#     ('2', '1'): ['<A'],
#     ('2', '2'): ['A'],
#     ('2', '3'): ['>A'],
#     ('2', '4'): ['^<A', '<^A'],
#     ('2', '5'): ['^A'],
#     ('2', '6'): ['^>A', '>^A'],
#     ('2', '7'): ['<^^A', '^<^A', '^^<A'],
#     ('2', '8'): ['^^A'],
#     ('2', '9'): ['^^>A', '^>^A', '>^^A'],
    
#     ('3', '0'): ['<vA', 'v<A'],
#     ('3', '1'): ['<<A'],
#     ('3', '2'): ['<A'],
#     ('3', '3'): ['A'],
#     ('3', '4'): ['^<<A', '<^<A', '<<^A'],
#     ('3', '5'): ['<^A', '^<A'],
#     ('3', '6'): ['^A'],
#     ('3', '7'): ['<<^^A', '<^<^A', '^<^<A', '<^^<A', '^<<^A', '^^<<A'],
#     ('3', '8'): ['<^^A', '^<^A', '^^<A'],
#     ('3', '9'): ['^^A'],
    
#     ('4', 'A'): ['>>vvA', '>v>vA', '>vv>A', 'v>>vA', 'v>v>A'],
#     ('4', '0'): ['v>vA', '>vvA'],
#     ('4', '1'): ['vA'],
#     ('4', '2'): ['v>A', '>vA'],
#     ('4', '3'): ['v>>A', '>v>A', '>>vA'],
#     ('4', '4'): ['A'],
#     ('4', '5'): ['>A'],
#     ('4', '6'): ['>>A'],
#     ('4', '7'): ['^A'],
#     ('4', '8'): ['^>A', '>^A'],
#     ('4', '9'): ['^>>A', '>^>A', '>>^A'],
    
#     ('5', '0'): ['vvA'],
#     ('5', '1'): ['<vA', '<vA'],
#     ('5', '2'): ['vA'],
#     ('5', '3'): ['v>A', '>vA'],
#     ('5', '4'): ['<A'],
#     ('5', '5'): ['A'],
#     ('5', '6'): ['>A'],
#     ('5', '7'): ['<^A', '^<A'],
#     ('5', '8'): ['^A'],
#     ('5', '9'): ['^>A', '>^A'],
    
#     ('6', 'A'): ['vvA'],
#     ('6', '0'): ['<vvA', 'v<vA', 'vv<A'],
#     ('6', '1'): ['<<vA', '<v<A', 'v<<A'],
#     ('6', '2'): ['<vA', 'v<A'],
#     ('6', '3'): ['vA'],
#     ('6', '4'): ['<<A'],
#     ('6', '5'): ['<A'],
#     ('6', '6'): ['A'],
#     ('6', '7'): ['<<^A', '<^<A', '^<<A'],
#     ('6', '8'): ['<^A', '^<A'],
#     ('6', '9'): ['^A'],
    
#     ('7', 'A'): ['vv>v>A', 'vv>>vA', 'v>v>vvA', 'v>>vvA', '>>vvvA', 'v>vv>A', '>vvv>A', 'v>v>vA'],
#     ('7', '0'): ['vv>vA', 'v>vvA', '>vvvA'],
#     ('7', '1'): ['vvA'],
#     ('7', '2'): ['vv>A'],
#     ('7', '3'): ['vv>>A', 'v>v>A', '>v>vA', '>>vvA'],
#     ('7', '4'): ['vA'],
#     ('7', '5'): ['v>A', '>vA'],
#     ('7', '6'): ['>>vA', 'v>>A', '>v>A'],
#     ('7', '7'): ['A'],
#     ('7', '8'): ['>A'],
#     ('7', '9'): ['>>A'],
    
#     ('8', 'A'): ['>vvvA', 'v>vvA', 'vv>vA', 'vvv>A'],
#     ('8', '0'): ['vvvA'],
#     ('8', '1'): ['<vvA', 'v<vA', 'vv<A'],
#     ('8', '2'): ['vvA'],
#     ('8', '3'): ['vv>A', 'v>vA', '>vvA'],
#     ('8', '4'): ['<vA', 'v<A'],
#     ('8', '5'): ['vA'],
#     ('8', '6'): ['>vA', 'v>A'],
#     ('8', '7'): ['<A'],
#     ('8', '8'): ['A'],
#     ('8', '9'): ['>A'],

#     ('9', 'A'): ['vvvA'],
#     ('9', '0'): ['vvv<A', 'vv<vA', 'v<vvA', '<vvvA'],
#     ('9', '1'): ['<<vvA', '<v<vA', 'v<v<A', '<vv<A', 'v<<vA', 'vv<<A'],
#     ('9', '2'): ['<vvA', 'v<vA', 'vv<A'],
#     ('9', '3'): ['vvA'],
#     ('9', '4'): ['<<vA', '<v<A', 'v<<A'],
#     ('9', '5'): ['<vA', 'v<A'],
#     ('9', '6'): ['vA'],
#     ('9', '7'): ['<<A'],
#     ('9', '8'): ['<A'],
#     ('9', '9'): ['A'],
# }
    
# dir_to_dir = {
#     ('A', '<'): ['<v<A', 'v<<A'],
#     ('A', 'v'): ['<vA', 'v<A'],
#     ('A', '>'): ['vA'],
#     ('A', '^'): ['<A'],
#     ('A', 'A'): ['A'],
    
#     ('^', '^'): ['A'],
#     ('^', 'A'): ['>A'],
#     ('^', '<'): ['v<A'],
#     ('^', 'v'): ['vA'],
#     ('^', '>'): ['v>A', '>vA'],
    
#     ('<', '^'): ['>^A'],
#     ('<', 'A'): ['>^>A', '>>^A'],
#     ('<', '<'): ['A'],
#     ('<', 'v'): ['>A'],
#     ('<', '>'): ['>>A'],
    
#     ('v', '^'): ['^A'],
#     ('v', '<'): ['<A'],
#     ('v', '>'): ['>A'],
#     ('v', 'v'): ['A'],
#     ('v', 'A'): ['>^A', '^>A'],
    
#     ('>', '>'): ['A'],
#     ('>', '^'): ['<^A', '^<A'],
#     ('>', '<'): ['<<A'],
#     ('>', 'v'): ['<A'],
#     ('>', 'A'): ['^A']
# }